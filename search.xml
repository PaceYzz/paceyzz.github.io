<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2025/05/22/hello-world/</url>
    <content><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.
Quick StartCreate a new post$ hexo new &quot;My New Post&quot;

#include&lt;iostream&gt;using namespace std;int main() &#123;	return 0;&#125;

More info: Writing
Run server$ hexo server

More info: Server
Generate static files$ hexo generate

More info: Generating
Deploy to remote sites$ hexo deploy

More info: Deployment
]]></content>
  </entry>
  <entry>
    <title>保姆级使用宝塔部署前后端分离项目</title>
    <url>/2025/05/07/%E4%BF%9D%E5%A7%86%E7%BA%A7%E4%BD%BF%E7%94%A8%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[服务器安装宝塔面板安装 Python若安装报错没有Python的话需要先安装Python
输入以下命令检查是否已经安装 Python3：
python3 --version


如果输出显示 Python 版本号（例如 Python 3.8.10 或 Python 3.10.12），说明系统已安装 Python 3。
如果显示错误信息（如 &#96;command not found），则需要安装 Python 3。

使用 APT 从默认存储库安装 Python 3

更新系统包列表：

sudo apt update


安装 &#96;Python 3：

sudo apt install python3 -y


验证安装

python3 --version


安装宝塔面板
我服务器安装的是Ubuntu 20.04系统，对应的系统安装命令可以去 宝塔面板 获取

wget -O install_panel.sh https://download.bt.cn/install/install_panel.sh &amp;&amp; sudo bash install_panel.sh ed8484bec



安装完成之后会给出安装完成信息



去服务器安全组控制台放行端口



到这里我们就可以访问外网 ipv4 面板地址根据账号和密码进行登录宝塔面板了


配置宝塔面板
找到软件商店，安装这些软件
根据自己的需求选择安装软件，这里只是以我的需求为例





宝塔和服务器安全组都需要对我们所需的端口进行放行



现在宝塔的配置基本上差不多了，接下里就是部署项目了
部署后端项目修改后端配置文件
新建一个 application-prod.yml线上配置文件
指定线上环境运行端口和配置文件所处环境





将之前的application.yml配置文件改为 application-dev.yml作为本地运行环境的配置文件
指定本地运行环境端口和指定该配置文件所处环境，参考上方图片





新建application.yml配置文件用于指定使用具体的配置文件


现在进行项目的打包
将项目上传到服务器
打开宝塔面板，进入文件管理，我们可以新建一个文件夹专门用来存放我们的后端jar包



将我们刚刚打包好的 jar 包上传到文件夹中



来到宝塔“网站”功能里面，点击添加 Java 项目，安装与自己开发对应的 JDK



指定我们刚刚上传的 jar 包，指定配置文件和端口

--spring.profiles.active=prod --server.port=9091


启动后端项目
点击确定后，启动我们的项目就可以了



可以在设置中查看到我们项目的日志



在宝塔面板和服务器安全组放行后端接口




这时候我们就可以访问我们后端的接口，进行测试了


部署前端项目更改前端配置这里的目的就一个__：让我们前端项目部署到线上后，访问的是我们线上部署的后端项目ip地址和端口，而不是本地开发环境地址

更改 vite.config.ts配置，根据不同的环境访问后端不同的地址
可以根据我提供的配置文件进行修改




// https://vite.dev/config/export default defineConfig((&#123; command, mode &#125;) =&gt; &#123;  // 根据当前工作目录中的 `mode` 加载 .env 文件  const env = loadEnv(mode, process.cwd())  // 定义不同环境的API地址  const apiUrl = &#123;    development: &#x27;http://localhost:8004/api&#x27;,    production: &#x27;http://your_ip:9091/api&#x27;, // 替换为你的生产环境API地址  &#125;  return &#123;    plugins: [vue(), vueDevTools()],    resolve: &#123;      alias: &#123;        &#x27;@&#x27;: fileURLToPath(new URL(&#x27;./src&#x27;, import.meta.url)),      &#125;,    &#125;,    define: &#123;      // 注入环境变量      &#x27;import.meta.env.VITE_API_BASE_URL&#x27;: JSON.stringify(apiUrl[mode as keyof typeof apiUrl]),    &#125;,    server: &#123;      proxy: &#123;        &#x27;/api&#x27;: &#123;          target: apiUrl[mode as keyof typeof apiUrl],          changeOrigin: true,          rewrite: (path) =&gt; path.replace(/^\/api/, &#x27;&#x27;),        &#125;,      &#125;,    &#125;,    build: &#123;      outDir: &#x27;dist&#x27;, // 构建输出目录      assetsDir: &#x27;assets&#x27;, // 静态资源目录      minify: &#x27;terser&#x27;, // 压缩方式      terserOptions: &#123;        compress: &#123;          drop_console: true, // 生产环境去除 console          drop_debugger: true, // 生产环境去除 debugger        &#125;,      &#125;,      rollupOptions: &#123;        output: &#123;          chunkFileNames: &#x27;assets/js/[name]-[hash].js&#x27;,          entryFileNames: &#x27;assets/js/[name]-[hash].js&#x27;,          assetFileNames: &#x27;assets/[ext]/[name]-[hash].[ext]&#x27;,        &#125;,      &#125;,    &#125;,  &#125;&#125;)


更改配置好的axios配置文件


// 根据环境变量获取API基础地址const getBaseUrl = () =&gt; &#123;  // 开发环境  if (import.meta.env.DEV) &#123;    return &#x27;http://localhost:8004/api&#x27;  &#125;  // 生产环境  return import.meta.env.VITE_API_BASE_URL || &#x27;http://localhost:8004/api&#x27;&#125;// 创建 Axios 实例const myAxios = axios.create(&#123;  baseURL: getBaseUrl(),  timeout: 60000,  withCredentials: true,&#125;)// 全局请求拦截器myAxios.interceptors.request.use(  function (config) &#123;    return config  &#125;,  function (error) &#123;    return Promise.reject(error)  &#125;,)// 全局响应拦截器myAxios.interceptors.response.use(  function (response) &#123;    ......  &#125;,  function (error) &#123;    return Promise.reject(error)  &#125;,)

进行打包
若我们项目中使用了TypeScript在打包时可能会报错，我们可以直接使用vite build进行打包，跳过TS所报的一些语法上的错误
在package.json配置文件中将build命令改为vite build





打包成功后会出现dist目录，这就是我们打包的结果
还是同后端打包结果一样，在文件资源管理器中打开



npm run build


宝塔新建站点
新建站点





配置伪静态代码

location / &#123;  if (!-e $request_filename) &#123;    rewrite  ^(.*)$ /index.html?s=/$1  last;    break;  &#125;&#125;



上传打包得到dist文件
打开我们刚才建站的目录




2. 上传打包得到的`dist`文件




修改访问站点的目录



这里和后端部署一样，需要放行我们的端口

进行测试成功了！！！
注：后端设置的跨域需要自己设置


]]></content>
      <categories>
        <category>部署</category>
      </categories>
      <tags>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2025/05/23/test/</url>
    <content><![CDATA[hello]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>test1</title>
    <url>/2025/05/23/test1/</url>
    <content><![CDATA[1111-test]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
